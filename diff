diff --git a/fooChecker.lex b/fooChecker.lex
index 49c0128..037e881 100644
--- a/fooChecker.lex
+++ b/fooChecker.lex
@@ -17,6 +17,7 @@ Neg [-]
 EmbdQuote \\" 
 EmbdBkSlash \\\\ 
 SemiColon ;
+eq =
 
  /****** setup the C/lex infrastructure ******/
 %{
@@ -122,6 +123,7 @@ const int MaxLen = 128;
 
  "("         { return *yytext; }
 
+ "="         { return *yytext; }
 
  /* the semi-colon */
 ";"        { return(';'); }






diff --git a/fooChecker.yacc b/fooChecker.yacc
index 6f6a97b..a98de43 100644
--- a/fooChecker.yacc
+++ b/fooChecker.yacc
@@ -55,8 +55,8 @@ int yyerror(char* s);
  /* script --> vardecl */
 script:
 	vardecl
-   | script printout
-   |
+   | script printVariable 
+   | script printLiteral
 	;
 
 
@@ -68,7 +68,9 @@ vardecl: VAR IDENTIFIER ';'
 	   printf("...declared variable %s...\n", $2);
 	};
 
- /* print --> IDENTIFIER 
+/* assignment --> 
+
+  /* printout --> PRINT ( STRING )
   */
 printout: PRINT '(' STRING ')'
    {
diff --git a/trialanderror/stringsv2_fooChecker.lex b/trialanderror/stringsv2_fooChecker.lex
deleted file mode 100644
index 33a7bbf..0000000
--- a/trialanderror/stringsv2_fooChecker.lex
+++ /dev/null
@@ -1,123 +0,0 @@
-
- /* sample starter file for the lex portion of your project,
-  * currently just accepts variable definitions where the
-  *    variable name is alphabetic
-  */
-
- /* Define alphabetic chars */
-Alpha [a-zA-Z]
-Num \d
-
-String \"(\\\\|\\\"|[^"\\])*\"
-
-
-Bool [TF]
-DbQuote ["]
-Neg [-]
-EmbdQuote \\" 
-EmbdBkSlash \\\\ 
-SemiColon ;
-
- /****** setup the C/lex infrastructure ******/
-%{
-#include <stdio.h>
-#include "y.tab.h"
-extern YYSTYPE yylval;
-int yywrap();
-int yyerror(char* s);
-int row = 0;
-int column = 0;
-const int MaxLen = 128;
-%}
-
-
-%%
-
- /****** Rules for tokens ******/
-
- /* for the keyword "VAR" return VAR as the type */
-"VAR"      { return(VAR); }
-
-"print"    { return(PRINT); } 
-
-
- /* Matches string (ie: begins & ends with ", may include escaped \ or "
-  * 
-
-*/
-({String}) { 
-		int slen = strlen(yytext)-2;
-		memmove(yytext, &yytext[1], strlen(yytext)-2);
-		yytext[slen] = '\0';
-		yylval.str = calloc(strlen(yytext)-1, sizeof(char));
-		while(*yytext != '\0')
-		{
-			*yylval.str = *yytext;
-			if(*yylval.str != '\\') yylval.str++; 
-			yytext++;
-		}
-		*yylval.str = '\0';
-		yylval.str = &yylval.str[0];
-	   //printf("%c", yylval.str[strlen(yylval.str)-1]);
-		return(STRING); 
-   }
-
- /* alphabetic identifiers are one or more Alphas,
-  *    store the actual text for the identifier
-  *    and return IDENTIFIER as the type */
-({Alpha})+ { yylval.alpha = strdup(yytext); return(IDENTIFIER); }
-
- /*Match a Real Number
-  *    store the converted value, string to float,
-  *    for the identifier
-  *    and return REAL as the type */
- ^({Neg})?({Num})+\.({Num})+$ { yylval.real = atof(yytext); return(REAL); }
-
- /* Match an Integer
-  *    store the converted value, string to integer 
-  *    for the identifier
-  *    and return INTEGER as the type */
- ^({Neg})?({Num})+$ { yylval.integer = atoi(yytext); return(INTEGER); }
-
- /* Match exactly 1 Boolean */
- ^({Bool})$ { yylval.boolean = *yytext; return(BOOLEAN); }
-
- ^({DbQuote})$    { return(DbQuote); }
-
-
- ")"         { return *yytext; }
-
- "("         { return *yytext; }
-
-
- /* the semi-colon */
-";"        { return(';'); }
-
- /* skip whitespace (spaces, tabs, form feeds etc */
-[ \t\f\v]  { }
-
- /* treat any other char as an error,
-  *    store an error message in an array,
-  *    replace the "c" in the message with the offending character,
-  *    pass the array to yyerror, and
-  *    return the offending char as a token (which the yacc rules will reject as invalid) */
-.          { char errmsg[] = "Unrecognized char: c"; errmsg[19] = yytext[0]; yyerror(errmsg); return(yytext[0]); }
-
-%%
-
- /****** supporting C code ******/
-
- /* cleanup any loose ends at the end of input,
-  * currently just returns true (1) */
-int yywrap()
-{
-   return 1;
-}
-
- /* print any generated error messages (to stderr) */
-int yyerror(char* s)
-{
-   fprintf(stderr, "***Error detected: %s\n   continuing with processing.\n", s);
-   return 1;
-}
-
